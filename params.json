{"name":"Gameloopjs","tagline":"This is just a GameLoop","body":"GameLoopJS\r\n==========\r\n\r\nIntroduction\r\n------------\r\nThere is nothing fancy about it, GameLoop  just calls ***update()*** and ***render()*** of added Objects by defined frames per second.\r\nThe default frames per second are 30, you can change it by calling:\r\n```javascript\r\nGameLoop.fps(60);\r\n```\r\nHow To Use:\r\n----------\r\nAdd your canvas\r\n```javascript\r\nGameLoop.init('yourCanvasId');\r\n```\r\n\r\nAdd game objects\r\n-------------------------------\r\nLike mentioned before ***GameLoop*** mainly takes care of the update circles.\r\nSo your object should have the two functions ***update*** and ***render***.\r\n\r\nUpdate will be called before render.\r\n```javascript\r\n\r\n// Example: Bouncing Box\r\n// @desc    red square that moves \r\n//          down until it hits the canvas height\r\n//          or up until it hits the 0 point of the canvas\r\n\r\nvar YourObject = function() {\r\n    \r\n    var render, \r\n        update,\r\n        position,\r\n        speed = 1;\r\n        \r\n    position = {\r\n    \tx: 50,\r\n    \ty: 50\r\n    };\r\n\r\n    render = function() {\r\n            \r\n        var ctx       = GameLoop.context();\r\n        ctx.fillStyle = \"red\";\r\n    \r\n        ctx.fillRect(this.position.x,this.position.y,50,50);\r\n    };\r\n\r\n    update = function() {\r\n\r\n        canvas = GameLoop.canvas();\r\n\r\n        if(position.y >= canvas.height - 50 /* height of the rectangle */){\r\n            speed = -1;\r\n        } else if(position.y <= 0){\r\n            speed = 1;\r\n        }\r\n\r\n        this.position.y += speed * GameLoop.deltaTime();\r\n    };\r\n\r\n    return {\r\n        render: render,\r\n        update: update\r\n    };\r\n    \r\n};\r\n```\r\nNow all you have to do is to create an instance of our new Object and add it to the GameLoop\r\n\r\n```javascript\r\n// add your object\r\nvar yourObject = new YourObject();\r\nGameLoop.addObject(yourObject);\r\n```\r\n\r\nStart the Game\r\n--------------\r\nStart the loop\r\n```javascript\r\nGameLoop.start();\r\n```\r\n\r\nStop the Game\r\n--------------\r\nStop the loop\r\n```javascript\r\nGameLoop.stop();\r\n```\r\n\r\nParameters\r\n-------------\r\nFor smooth movement use ***deltaTime()***:\r\n```javascript\r\nGameLoop.deltaTime();\r\n```\r\n\r\n***Canvas***:\r\n```javascript\r\nvar canvas = GameLoop.canvas();\r\n```\r\n\r\n***Context***:\r\n```javascript\r\nvar ctx = GameLoop.context();\r\n```\r\n\r\nNotice\r\n------\r\nGameLoopJS is still in an early stage of development and may change in future versions.\r\n\r\nLicense\r\n------\r\n  -\r\nThe MIT License (MIT)\r\n\r\n  Copyright (c) 2013 Markus Waitl\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in\r\n  all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n  THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}